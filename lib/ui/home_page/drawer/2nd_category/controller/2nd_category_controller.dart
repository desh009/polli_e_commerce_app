import 'package:get/get.dart';
import 'package:polli_e_commerce_app/core/screen/catergory/catergory_api/response/category_response.dart';
import 'package:polli_e_commerce_app/ui/home_page/drawer/2nd_category/2nd_category_response/2nd_category_response.dart';
import 'package:polli_e_commerce_app/ui/home_page/drawer/2nd_category/repository/2nd_category_repository.dart';

class Category2Controller extends GetxController {
  final Category2Repository _categoryDetailsRepository;

  Category2Controller(this._categoryDetailsRepository);

  // Dynamic maps
  final Map<String, int> categoryNameToId = {};
  final Map<String, int> subCategoryNameToId = {};

  // Observable states
  var categoryDetails = Rxn<Category2Response>();
  var childrenCategories = <Category>[].obs;
  var selectedCategory = Rxn<Category>();

  // Loading states
  var isLoading = false.obs;
  var isChildrenLoading = false.obs;

  // Error states
  var errorMessage = ''.obs;
  var childrenError = ''.obs;

  @override
  void onInit() {
    super.onInit();
  }

  /// ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø ‡¶°‡¶ø‡¶ü‡ßá‡¶á‡¶≤‡¶∏ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ (‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø + ‡¶ö‡¶ø‡¶≤‡¶°‡ßç‡¶∞‡ßá‡¶®)
  Future<void> loadCategoryDetails(int categoryId) async {
    try {
      isLoading(true);
      errorMessage('');
      
      // üîπ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶ó‡ßá‡¶∞ getCategoryByyId ‡¶è‡¶∞ ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ‡ßü getCategoryDetails ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ
      final details = await _categoryDetailsRepository.getCategoryDetails(categoryId);
      categoryDetails(details);
      childrenCategories.assignAll(details.children);
      selectedCategory(details.category);

      // Dynamic map update
      _buildCategoryMaps();
    } catch (e) {
      errorMessage(e.toString());
      print('‚ùå Error loading category details: $e');
    } finally {
      isLoading(false);
    }
  }

  /// ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ö‡¶ø‡¶≤‡¶°‡ßç‡¶∞‡ßá‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
  Future<void> loadCategoryChildren(int categoryId) async {
    try {
      isChildrenLoading(true);
      childrenError('');
      final children = await _categoryDetailsRepository.getCategoryChildren(categoryId);
      childrenCategories.assignAll(children);
    } catch (e) {
      childrenError(e.toString());
      print('‚ùå Error loading category children: $e');
    } finally {
      isChildrenLoading(false);
    }
  }

  /// Dynamic map builder
  void _buildCategoryMaps() {
    categoryNameToId.clear();
    subCategoryNameToId.clear();

    if (categoryDetails.value != null) {
      // parent category
      categoryNameToId[categoryDetails.value!.category.title] =
          categoryDetails.value!.category.id;

      // children
      for (var child in childrenCategories) {
        subCategoryNameToId[child.title] = child.id;
      }
    }
  }

  /// ‡¶∏‡ßç‡¶™‡ßá‡¶∏‡¶ø‡¶´‡¶ø‡¶ï ‡¶ö‡¶æ‡¶á‡¶≤‡ßç‡¶° ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
  void selectChildCategory(Category category) {
    selectedCategory(category);
  }

  /// ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
  void selectParentCategory() {
    if (categoryDetails.value != null) {
      selectedCategory(categoryDetails.value!.category);
    }
  }

  /// ‡¶∏‡¶¨ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶ï‡ßç‡¶≤‡¶ø‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
  void clearData() {
    categoryDetails.value = null;
    childrenCategories.clear();
    selectedCategory.value = null;
    errorMessage('');
    childrenError('');
  }

  /// ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
  bool get hasCategory => categoryDetails.value != null;

  /// ‡¶ö‡¶ø‡¶≤‡¶°‡ßç‡¶∞‡ßá‡¶® ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
  bool get hasChildren => childrenCategories.isNotEmpty;

  /// ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü‡ßá‡¶° ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø ID
  int? get selectedCategoryId => selectedCategory.value?.id;

  /// ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü‡ßá‡¶° ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø ‡¶®‡¶æ‡¶Æ
  String get selectedCategoryName => selectedCategory.value?.title ?? '';

  /// ‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø
  Category? get parentCategory => categoryDetails.value?.category;

  /// ‡¶∏‡¶¨ ‡¶ö‡¶ø‡¶≤‡¶°‡ßç‡¶∞‡ßá‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø
  List<Category> get allChildren => childrenCategories;

  /// ‡¶∂‡ßÅ‡¶ß‡ßÅ active ‡¶ö‡¶ø‡¶≤‡¶°‡ßç‡¶∞‡ßá‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø
  List<Category> get activeChildren {
    return childrenCategories.where((category) => category.status == 1).toList();
  }

  /// ‡¶á‡¶Æ‡ßá‡¶ú ‡¶∏‡¶π ‡¶ö‡¶ø‡¶≤‡¶°‡ßç‡¶∞‡ßá‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶ó‡¶∞‡¶ø
  List<Category> get childrenWithImages {
    return childrenCategories.where((category) => category.image != null).toList();
  }

  /// ‡¶ï‡ßã‡¶®‡ßã ‡¶≤‡ßã‡¶°‡¶ø‡¶Ç ‡¶ö‡¶≤‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ
  bool get anyLoading => isLoading.value || isChildrenLoading.value;

  /// ‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶∞‡¶∞ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ
  bool get hasError => errorMessage.isNotEmpty || childrenError.isNotEmpty;
}
